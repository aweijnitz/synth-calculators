#
name: Create and publish Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  workflow_dispatch:
  push:
    branches: ['prod']

jobs:
  build-and-push-image:
    # Use the environment where you stored the secrets:
    environment: deploy

    # Change to ubuntu-latest unless you intentionally need a self-hosted runner.
    # If you must use self-hosted, ensure Docker & required tooling are installed.
    runs-on: self-hosted

    # Job-scoped env: make sure secrets stored in the `deploy` environment are available to steps
    env:
      # Docker Hub registry host
      REGISTRY: docker.io
      # Use the project name you store in DOCKERHUB_PROJECT_NAME (e.g. "aweijnitz/synth-calculators").
      # Ensure this secret exists in the deploy environment.
      IMAGE_NAME: aweijnitz/synth-calculators
      # Container name on the host
      CONTAINER_NAME: synth-calculators
      # Host port to expose the application on
      HOST_PORT: 3010

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Deploy updated container
        run: |
          set -euo pipefail
          IMAGE_REF="${REGISTRY}/${IMAGE_NAME}@${{ steps.push.outputs.digest }}"

          echo "Pulling ${IMAGE_REF}"
          docker pull "${IMAGE_REF}"

          RUNNING=$(docker ps -q --filter "name=^${CONTAINER_NAME}$")
          if [ -n "${RUNNING}" ]; then
            echo "Stopping running container ${CONTAINER_NAME}"
            docker stop "${CONTAINER_NAME}"
          fi

          EXISTING=$(docker ps -aq --filter "name=^${CONTAINER_NAME}$")
          if [ -n "${EXISTING}" ]; then
            echo "Removing existing container ${CONTAINER_NAME}"
            docker rm "${CONTAINER_NAME}"
          fi

          echo "Starting container ${CONTAINER_NAME} from ${IMAGE_REF}"
          docker run -d \
            --name "${CONTAINER_NAME}" \
            --restart unless-stopped \
            -p "127.0.0.1:${HOST_PORT}:3010" \
            "${IMAGE_REF}"
